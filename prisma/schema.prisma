generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  fplTeamId     Int?          @unique
  fplTeamName   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  password      String?
  username      String?
  isAdmin       Boolean       @default(false)
  accounts      Account[]
  leagueEntries LeagueEntry[]
  sessions      Session[]
  transactions  Transaction[]
  wallet        Wallet?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WeeklyLeague {
  id                      String              @id @default(cuid())
  name                    String
  gameweek                Int
  entryFee                Float
  maxParticipants         Int
  currentParticipants     Int                 @default(0)
  status                  String              @default("upcoming")
  startDate               DateTime
  endDate                 DateTime
  platformFeePercentage   Float               @default(10)
  minParticipantsRequired Int                 @default(3)
  tiebreaker              String              @default("goals_scored")
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  leagueType              String              @default("tri")
  description             String?
  entries                 LeagueEntry[]
  prizeDistribution       PrizeDistribution[]
}

model PrizeDistribution {
  id              String       @id @default(cuid())
  leagueId        String
  position        Int
  percentageShare Float
  league          WeeklyLeague @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([leagueId, position])
}

model LeagueEntry {
  id            String       @id @default(cuid())
  userId        String
  leagueId      String
  fplTeamId     Int
  joinedAt      DateTime     @default(now())
  paid          Boolean      @default(false)
  paymentId     String?
  pointsAtStart Int?
  finalPoints   Int?
  weeklyPoints  Int?
  rank          Int?
  winnings      Float        @default(0)
  payoutStatus  String?
  league        WeeklyLeague @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
}

model Wallet {
  id           String        @id @default(cuid())
  userId       String        @unique
  balance      Float         @default(0)
  currency     String        @default("USD")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                String   @id @default(cuid())
  userId            String
  walletId          String
  type              String
  amount            Float
  currency          String   @default("NGN")
  status            String
  externalReference String?
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  metadata          Json?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet            Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([walletId])
}

model GameweekCache {
  id          String   @id @default(cuid())
  gameweekId  Int      @unique
  status      String
  startDate   DateTime
  endDate     DateTime
  fplData     Json?
  lastUpdated DateTime @default(now())
}

model FplTeamCache {
  id          String   @id @default(cuid())
  fplTeamId   Int      @unique
  teamName    String
  playerName  String?
  lastUpdated DateTime @default(now())
}
