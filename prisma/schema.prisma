// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  fplTeamId     Int?          @unique
  fplTeamName   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt // Correct
  password      String?
  username      String?
  isAdmin       Boolean       @default(false)

  // Relations
  accounts      Account[]
  leagueEntries LeagueEntry[]
  sessions      Session[]
  transactions  Transaction[]
  bankAccounts  UserBankAccount[]
  wallet        Wallet?
  // No extra indexes typically needed on User besides unique fields
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // <<< ADDED index for querying by user
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // <<< ADDED index for querying by user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WeeklyLeague {
  id                      String        @id @default(cuid())
  name                    String
  gameweek                Int
  entryFee                Decimal       @db.Decimal(12, 2)
  maxParticipants         Int
  currentParticipants     Int           @default(0)
  status                  String        @default("upcoming")
  startDate               DateTime
  endDate                 DateTime
  platformFeePercentage   Float         @default(10)
  minParticipantsRequired Int           @default(3)
  tiebreaker              String        @default("goals_scored")
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  leagueType              String        @default("tri")
  description             String?
  currentHighestGwPoints  Int?

  // Relations
  entries                 LeagueEntry[]
  prizeDistribution       PrizeDistribution[]

  // Indexes
  @@index([status, gameweek, createdAt]) // <<< ADDED index for filtering/sorting lists
}

model PrizeDistribution {
  id              String       @id @default(cuid())
  leagueId        String
  position        Int
  percentageShare Decimal      @db.Decimal(5, 2)
  league          WeeklyLeague @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([leagueId, position])
  @@index([leagueId]) // Index implied by relation+unique, but explicit is fine
}

model LeagueEntry {
  id            String        @id @default(cuid())
  userId        String
  leagueId      String
  fplTeamId     Int
  joinedAt      DateTime      @default(now())
  paid          Boolean       @default(false)
  paymentId     String?
  pointsAtStart Int?
  finalPoints   Int?
  weeklyPoints  Int?
  rank          Int?
  winnings      Decimal       @default(0) @db.Decimal(12, 2)
  payoutStatus  String?
  // FIX: Added default(now()) for adding column to existing rows
  updatedAt     DateTime      @default(now()) @updatedAt

  // Relations
  league        WeeklyLeague  @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints & Indexes
  @@unique([userId, leagueId])
  @@index([userId])             // Existing
  @@index([leagueId])           // Existing
  @@index([leagueId, finalPoints]) // Keep for completed tiebreak/sort
  @@index([leagueId, rank])      // Keep for completed sort
  @@index([leagueId, weeklyPoints]) // <<< ADDED for active sort
  @@index([leagueId, joinedAt])     // <<< ADDED for upcoming sort
}

model Wallet {
  id           String        @id @default(cuid())
  userId       String        @unique
  balance      Decimal       @default(0) @db.Decimal(12, 2)
  currency     String        @default("NGN")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Index on userId implied by @unique
}

model Transaction {
  id                String            @id @default(cuid())
  userId            String
  walletId          String
  amount            Decimal           @db.Decimal(12, 2)
  currency          String            @default("NGN")
  externalReference String?
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  metadata          Json?
  type              TransactionType   // Using Enum (Potential migration issue if data exists)
  status            TransactionStatus @default(PENDING) // Using Enum (Potential migration issue if data exists)

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet            Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])             // Existing
  @@index([walletId])           // Existing
  @@index([status])             // Existing (Now on Enum)
  @@index([type])               // Existing (Now on Enum)
  @@index([userId, createdAt])  // <<< ADDED for user history
  @@index([walletId, createdAt])// <<< ADDED for wallet history
}

model UserBankAccount {
  id            String   @id @default(cuid())
  userId        String
  accountNumber String
  accountName   String
  bankName      String
  bankCode      String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountNumber])
  @@index([userId]) // Existing
}

// Cache models - fixed updatedAt
model GameweekCache {
  id          String   @id @default(cuid())
  gameweekId  Int      @unique
  status      String
  startDate   DateTime
  endDate     DateTime
  fplData     Json?
  lastUpdated DateTime @updatedAt // Corrected
}

model FplTeamCache {
  id          String   @id @default(cuid())
  fplTeamId   Int      @unique
  teamName    String
  playerName  String?
  lastUpdated DateTime @updatedAt // Corrected
}

// Enum definitions (kept as per this schema version)
enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  ENTRY_FEE
  WINNINGS_PAYOUT
  REFUND
  ADJUSTMENT_CREDIT
  ADJUSTMENT_DEBIT
}

enum TransactionStatus {
  PENDING
  REQUIRES_APPROVAL
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}